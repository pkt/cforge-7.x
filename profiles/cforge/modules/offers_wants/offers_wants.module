<?php
// $Id:

/*
 * Provides a content type called proposition for offers and wants with a dedicated vocabulary,
 * various optional properties on a settings page, and views.
 * The views in code are adapted for the settings.
 * * makes a nice taxnonomy navigation block using jquerymenu
 * * Time limited propositions, inlcuding notification before expiry.
 * * Data structure allows for sales, loans and communally owned goods
 * * goods and services
 * * optional 'wants' in addition to offers.
 */
function offers_wants_help($path, $args) {
  if ($path == 'admin/config/ow') {
    $help[] = t('This panel saves you digging around in Drupal by giving you easy options while managing other parts of the system.');
    $help[] = t('Offers and wants are organised using two vocabularies.');
    $help[] = t('The first is like categories and subcategories in the yellow pages.');
    $help[] = t('Create and organise your categories here:');
    $help[] = '<br /><strong>'.l(t('Edit categories'), "admin/structure/taxonomy/offers_wants_categories") . '</strong>';
    $help[] = '<p>'.t("'Types' is an optional second way to find things which creates extra tabs on the listings pages.");
    $help[] = t("It only works if there is more than one term in the vocabulary.");
    $help[] = '<br /><strong>'.l(t('Edit types'), "admin/structure/taxonomy/offers_wants_types") .'</strong></p>';
    $help[] = '<p>'. t("Here are some ideas which have been used by our community:");
    $help[] = '<ul><li>'. t("Loans - in order to foster sharing goods amongst your community members,  and encourage efficient resource use.").'</li>';
    $help[] = '<li>'. t("Tips - in order to allow your members to share ways on living better in your area.").'</li>';
    $help[] = '<li>'. t("Outings - in order to allow your members to self-organise and build ties.").'</li>';
    $help[] = '<li>'. t("Gifts - in order to foster generosity, while publicly recognising the act.").'</li>';
    $help[] = '<li>'. t("To dos - in order to list and share the tasks linked to making your association work.") .'</li></ul>';
    return implode(' ', $help);
  }
}

/*
 * Implements hook_menu
 */
function offers_wants_menu() {
  $items['admin/config/ow'] = array(
    'title' => 'Offers & wants',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('offers_wants_settings_form'),
    'access arguments' => array('configure ow'),
  );
  $items['node/add/offer'] = array(
    'title' => 'Register offer',
    'page callback' => '_node_add_proposition',
    'page arguments' => array('0'),
    'access arguments' => array('post proposition'),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_SUGGESTED_ITEM
  );
  if (variable_get('offers_wants_proposition_wants', TRUE)) {
    $items['node/add/want'] = array(
      'title' => 'Register want',
      'page callback' => '_node_add_proposition',
      'page arguments' => array('1'),
      'access arguments' => array('post proposition'),
      'file' => 'node.pages.inc',
      'file path' => drupal_get_path('module', 'node'),
      'type' => MENU_SUGGESTED_ITEM
    );
  }
  return $items;
}

/**
 * Implements hook_node_info)().
 * This hook is required for modules to define one or more node types.
 */
function offers_wants_node_info() {
  $nodetypes['proposition'] = array(
    'name' => t('Offer/want'),
    'base' => 'proposition',
    'description' => t('Something which could meet a need in the community'),
    'has_title' => TRUE,
    'title_label' => t('One line description'),
    'locked' => TRUE
  );
  return $nodetypes;
}

/*
 * implements views hook_views_api
 */
function offers_wants_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'offers_wants') . '/views',
  );
}

/**
 * Implements hook_permission()
 */
function offers_wants_permission(){
  return array(
    'post proposition' => array(
      'title' => t('Post offers/wants'),
      'description' => t('Create and manage own offers & wants')
    ),
    'edit propositions' => array(
      'title' => t('Moderate offers/wants'),
      'description' => t('Edit all offers & wants')
    ),
    'configure ow' => array(
      'title' => t('Configure offers & wants'),
      'description' => t('suitable for a sub-admin')
    )
  );
}

/**
 * Implements hook_access().
 */
function offers_wants_node_access($node, $op, $account = NULL){
  if ($node == 'proposition' || (is_object($node) && $node->type == 'proposition')) {
    switch ($op) {
      case 'view': if (user_access('access content')) return NODE_ACCESS_ALLOW; break;
      case 'create': if (user_access('post proposition')) return NODE_ACCESS_ALLOW;break;
      case 'delete':
      case 'update':
        if (user_access('edit propositions') || $node->uid == $account->uid) return NODE_ACCESS_ALLOW;
    }
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

/*
 * implements hook_block_info
 */
function offers_wants_block_info() {
  $blocks['propositions_taxonomy_block'] = array(
    'info' => 'Offers/Wants categories',
    'visibility' => 1,
    'pages' => "offers*\nwants*",
    'cache' => DRUPAL_NO_CACHE, //would be nice to cache this and clear it when a proposition is saved
    'weight' => -25
  );
  $blocks['add_proposition'] = array(
    'info' => 'Add offer/want',
    'visibility' => 1,
    'pages' => "offers*\nwants*",
    'cache' => DRUPAL_CACHE_GLOBAL //seems not to be working
  );
  return $blocks;
}

/*
 * implements hook_block_view
 */
function offers_wants_block_view($delta) {
  $want = strpos($_GET['q'], 'want') !== FALSE;
  switch ($delta) {
    case 'propositions_taxonomy_block':
      return array(
        'subject' => $want ? t('Want categories') : t('Offer categories'),
        'content' => offers_wants_jmenu_categories($want)
      );
    case 'add_proposition':
      if (arg(1) == 'add' || !user_access('post proposition')) return; //to prevent confusion!
      return array(
        'subject' =>  $want ? t('Add a want') : t('Add an offer'),
        'content' => drupal_get_form('proposition_start_form', $want),
      );
  }
}
/*
 * menu callback
 * wrapper around the node_form to prefil the 'want' field
 */
function _node_add_proposition($want = 0){
  $node = array(
    'want' => $want,
    'type' => 'proposition',
    'language' => '',
    'uid' => $GLOBALS['user']->uid,
    'name' => $GLOBALS['user']->name
  );
  //$want ? drupal_set_title(t('I need')) : drupal_set_title(t('I have'));
  return drupal_get_form('proposition_node_form', (object)$node);
}


/**
 * Implementation of hook_form)().
 */
function proposition_form(&$node, $form_state, $prelim = FALSE){
  //there is a preliminary block which can retrieves and populate the first fields of this form
  if (isset($form_state['input']['form_id']) && $form_state['input']['form_id'] == 'proposition_start_form') {
    $node->want = intval($form_state['input']['want']);
    $node->title = $form_state['input']['title'];
  }
  $wants = variable_get('offers_wants_proposition_wants', TRUE);
  if ($wants && !isset($node->want)) {
    $form['want'] = array(
      '#type' => 'radios',
      '#options' => array(
        t('I have'),
        t('I need'),
      ),
      '#default_value' => isset($node->want) ? $node->want : '',
      '#required' => TRUE,
      '#weight' => -10,
    );
    $types  = node_type_get_types();
    $title = $types['proposition']->title_label;
  }
  else {
    $val = intval($node->want);
    $form['want'] = array(
      '#type' => 'hidden',
      '#value' => intval($val),
    );
    $title = $node->want ? t('I need') : t('I have');
  }

  $form['title'] = array (
    '#title' => $title,
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => empty($node->title) ? '' : $node->title,
    '#weight' => -5, //this is hardcoded in node_content_form
    '#max_length' => 128,
    '#attributes' => array('style' => 'width:90%')
  );

  return $form;
}


/*
 * implements hook_form_FORM_ID_alter
 * NB this does not alter the form in the block, which isn't a node_form
 */
function offers_wants_form_proposition_node_form_alter(&$form, $form_state) {
  unset($form['actions']['preview']);//couldn't be bothered with previewing
  if (isset($form['actions']['delete'])) {  //redirect interferes with delete
    unset($form['#redirect']);
  }
  unset($form['#pre_render']);
  $form['end'] = array(
    '#title' => t('Delete after'),
    '#description' => t('Time from now after which the item will expire'),
    '#type' => 'select',
    '#options' => _ow_periods(),
    '#required' => FALSE,
    '#default_value' => isset($form['#node']->nid) ? $form['#node']->end: variable_get('offers_wants_default_expiry', 0),
  );

  //get the name of the category element
  $form['offers_wants_categories']['und']['#title'] = t('It belongs in these categories');
  $form['offers_wants_categories']['und']['#description'] = '';
  //remove or hide the types widget
  if (isset($form['offers_wants_types']) && count($form['offers_wants_types'][LANGUAGE_NONE]['#options']) < 3){
    $lang = $form['offers_wants_types']['#language'];
    unset($form['offers_wants_types'][LANGUAGE_NONE]['#options']['_none']);
    $form['offers_wants_types'] = array(
      '#language' => $lang,
      $lang => array(
        '#type' => 'hidden',
        '#value' => key($form['offers_wants_types'][LANGUAGE_NONE]['#options'])
      )
    );
  }
  $form['#theme'] = 'proposition_node_form';//use the theme only for full page form, not for the block.
  unset($form['menu']);
}


/*
 * implements hook_comment
 * mail the author of the proposition
 */
function offers_wants_comment_insert($comment) {
  $comment = (object)$comment;
  $node = node_load($comment->nid);
  if ($node->type == 'proposition') {
    $node_author = user_load($node->uid);
    $params = array('comment' => $comment, 'commenter' => user_load($comment->uid), 'node' => $node);
    drupal_mail('offers_wants', 'comment', $node_author->mail, user_preferred_language($node_author), $params);
  }
}


/*
 * implements node hook_load
 */
function proposition_load(&$nodes) {
  $result = db_query("SELECT * FROM {offers_wants} WHERE nid in (:nids)",array(':nids' => array_keys($nodes)));
  foreach($result as $record) {
    $nodes[$record->nid]->want = $record->want;
    $nodes[$record->nid]->end = $record->end;
  }
}

/*
 * implements node hook_insert
 */
function proposition_insert($node) {
  if ($node->end)$node->end = strtotime($node->end);
  drupal_write_record('offers_wants', $node);
}

/*
 * implements node hook_update
 */
function proposition_update($node) {
  if ($node->end)$node->end = strtotime($node->end);
  drupal_write_record('offers_wants', $node, array('nid'));
}

/*
 * implements node hook_view
 */
function proposition_view($node, $view_mode) {
  if (variable_get('offers_wants_proposition_wants', TRUE)) {
    $val = empty($node->want) ? t('Offered') : t('Wanted');
    $node->content['direction'] = array(
      '#markup' => "<h2>$val</h2>",
      '#weight' => -1
    );
  }
  if ($node->end) {
    $node->content['end'] = format_date($node->end, 'short');
  }
  return $node;
}

/*
 * implements hook_node_view
 * add the links
 */
function offers_wants_node_view_alter(&$build, $view_mode, $lang) {
  if ($build['#node']->type != 'proposition') return;
  //add the links
  $node = isset($build['offers_wants_types']['#object']) ? $build['offers_wants_types']['#object'] : $build['#node'];
  $uid = $node->uid;
  $ownername = format_username(user_load($uid));

  if (user_access('access user profiles')) {
     $build['links']['node']['#links']['contact'] = array(
      'title' => t('Send an email to !name', array('!name' => $ownername)),
      'href' => "user/$uid/contact",
    );
     $build['links']['node']['#links']['propositions'] = array(
      'title' => t("!name's @types", array('!name' => $ownername, '@type' => node_type_get_type($node)->name)),
      'href' => "user/$uid/propositions",
    );
     $build['links']['node']['#links']['userprofile'] = array(
      'title' => t("See !name's profile", array('!name' => $ownername)),
      'href' => "user/$uid",
    );
  }
  $categories_field = $build['#node']->offers_wants_categories;
  foreach (element_children($categories_field) as $lang) {
    foreach (element_children($categories_field[$lang]) as $delta) {
      $term = taxonomy_term_load($categories_field[$lang][$delta]['tid']);
      $build['links']['node']['#links']['cat-'.$term->tid] = array(
        'title' => t('See more in !category', array('!category' => $term->name)),
        'href' => $node->want ? 'wants/' : 'offers/' .$term->tid
      );
    }
  }
  $key = array_search('inline', $build['links']['#attributes']['class']);
  if (is_numeric($key)) unset($build['links']['#attributes']['class'][$key]);
}



/*
 * implements hook_theme_registry_alter
 * adds the default proposition template suggestion to the theme registry
 */
function offers_wants_theme_registry_alter(&$callbacks) {
  $callbacks['node__proposition'] = array(
    'base hook' => 'node',
    'template' => 'node--proposition',
    'path' => drupal_get_path('module', 'offers_wants')
  ) + $callbacks['node'];
}

/*
 * implements hook_preprocess_THEMEHOOK
 */
function offers_wants_preprocess_node(&$variables) {
  $node = &$variables['node'];
  if ($variables['node']->type != 'proposition') return;
  //just make sure comments are at the bottom
  $variables['content']['comments']['#weight'] = 50;//
  $variables['classes_array'][] = $node->want ? 'want' : 'offer';
  $attached = field_attach_view('node', $node, $variables['view_mode']);//a render array
  foreach($attached as $field_name => $field) {
    $variables[$field_name] = $field;
  }
  if ($node->end) {
    $variables['content']['end'] = array(
      '#markup' => '<div class = "proposition-expiry">'.t('<strong>Expiring:</strong> @date', array('@date' => $variables['content']['end'])).'</div>'
    );
  }
  if ($form_path = variable_get('ow_convert_path')) {
    $prop = $node->want ? 'incoming' : 'outgoing';
    $variables['convert_link'] = l(
      $node->want ? t('Claim for this') : t('Pay for this'),
      $form_path,
      array('query' => array($prop => 'node/'. $node->nid))
    );
  }
  else $variables['convert_link'] = '';

  $arg = array('!title' => filter_xss($node->title));
  drupal_set_title($node->want ? t('Want: !title', $arg) : t('Offer: !title', $arg), PASS_THROUGH);
}

/*
 * implements hook_theme
 */
function offers_wants_theme() {
  $items = array(
    'proposition_node_form' => array(
      'template' => 'proposition-node-form',
      'render element' => 'form',
    )
  );
  return $items;
}


/*
 * Manage proposition expiry and notifications
 * There is no log kept for notifications sent
 * Rather, it checks if any notifications have come due since the previous cron run
 */
function offers_wants_cron() {
  $nids = db_query("SELECT nid FROM {offers_wants} WHERE end > 0 AND end < :time", array(':time' => REQUEST_TIME))->fetchcol();
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $account = user_load($node->uid);
    $params = array('node' => $node, 'account' => $account);
    drupal_mail('offers_wants', 'expiry', $user->mail, $user->language, $params);
  }
  node_delete_multiple($nids);
}

function offers_wants_mail($key, &$message, $params) {
  switch ($key) {
    case 'expiry':
      $message['subject'] = $params['node']->want ? t('Your want has expired.') : t('Your offer has expired.');
      $message['body'][] = "@name,";
      $message['body'][] = t("Your post to @sitename,\n\n'@title'\n\n has been deleted.",
        array(
          '@name' => $params['account']->profile_firstname[LANGUAGE_NONE][0],
          '@title' => $params['node']->title
        ));
      break;
    case 'comment':
      $message['subject'] = $params['comment']->subject;
      $message['body'][] = t('@user has commented on your @type:', array(
        '@user' => $params['commenter']->name,
        '@type' => $params['node']->want ? t('want') : t('offer'))
      );
      $message['body'][] = $params['comment']->comment ."\n\n";
      $message['body'][] = t('Answer by clicking on this link (you must be logged in)') ."\n";
      $message['body'][] = url('node/'.$params['comment']->nid, array('absolute' => TRUE));
  }
}


function offers_wants_settings_form() {
  $form['offers_wants_proposition_wants'] = array(
    '#title' => t('Enable wants in addition to offers'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('offers_wants_proposition_wants', TRUE),
    '#weight' => 4
  );
  $form['offers_wants_default_expiry'] = array(
    '#title' => t('Default period before expiry'),
    '#description' => t('This default value of the expiry form widget'),
    '#type' => 'select',
    '#options' => _ow_periods(),
    '#default_value' => variable_get('offers_wants_default_expiry', 0)
  );
  if (module_exists('mcapi_forms')) {
    $form['ow_convert_path'] = array(
      '#title' => t('Conversion link path'),
      '#description' => t('The path to the transaction form'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ow_convert_path', 'transact/1stparty')
    );
  }

  //$form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form = system_settings_form($form);
  $form['#submit'][] = 'ow_settings_submit';
  return $form;
}


function ow_settings_submit($form, &$form_state) {
  if (module_exists('views_ui')) {
    drupal_set_message(
      t("Some views respond to settings on this page, but only 'default' views.") .' '.
        t("'Overridden' views are not affected, but can be 'Reverted'."),
      'warning'
    );
  }
  //we could save the propositiontypes early, before rebuilding everything
  views_invalidate_cache();
  menu_rebuild();
}

function _ow_save_vars($form_state, $vars) {
  $values = &$form_state['values'];
  foreach ($vars as $var) {
    if (isset($values[$var])) {
      variable_set($var, $values[$var]);
    }
  }
}

function cforge_mysql_timestamp($unixtime = NULL) {
  return date('Y-m-d H:i:s', $unixtime);
}

function _ow_periods() {
  return array(
    0 => t('Never'),
    '+1 day' => t('1 day'),
    '+2 days' => t('@count days', array('@count' => 2)),
    '+3 days' => t('@count days', array('@count' => 3)),
    '+5 days' => t('@count days', array('@count' => 5)),
    '+1 week' => t('1 week'),
    '+2 weeks' => t('@count weeks', array('@count' => 2)),
    '+1 month' => t('1 month'),
    '+2 months' => t('@count months', array('@count' => 2)),
    '+3 months' => t('@count months', array('@count' => 3)),
    '+6 months' => t('@count months', array('@count' => 6)),
    '+1 year' => t('1 year')
  );
}
/*
 * implements THEME hook
 * adjusts the menu tabs on the offers and wants views to stay within the existing category
 * I think in drupal 6 this HAS to be done at the theme level, even though it's horrible
 */
function phptemplate_menu_item_link($link) {
  if (empty($link['localized_options'])) {
    $link['localized_options'] = array();
  }
  if (is_numeric(arg(2))) {
    if(substr($link['href'], 0, 6) == 'offers') {
      $link['href'] .= '/'.arg(2);
    }
  }
  return l($link['title'], $link['href'], $link['localized_options']);
}

/*
 * this does all the work of the taxonomyblocks module and none of the mess
 * but doesn't recurse!
 * see http://pixelclever.com/official-documentation-jquery-menu-api
 */
function offers_wants_jmenu_categories($want) {
  $result1 = db_query("SELECT d.tid, d.name, h.parent
    FROM {taxonomy_term_data} d
    LEFT JOIN {taxonomy_term_hierarchy} h ON h.tid = d.tid
    RIGHT JOIN {taxonomy_vocabulary} v ON v.vid = d.vid AND v.machine_name = 'offers_wants_categories'"
  )->fetchAll(PDO::FETCH_ASSOC);

  //fetch the number of propositions in each category
  $counters = db_query("SELECT cat.offers_wants_categories_tid as tid, count(cat.entity_id) as count
    FROM {offers_wants} cp
    LEFT JOIN {field_data_offers_wants_categories} cat ON cat.entity_id = cp.nid
    WHERE cp.want = :want GROUP BY tid",
    array(':want' => intval($want))
  )->fetchAll(PDO::FETCH_ASSOC);
  $counts = array();
  foreach ($counters as $term) {
    $counts[$term['tid']] = $term['count'];
  }
  array_filter($counts);
  $children = $tree = $parents = array();
  $direction = $want ? 'wants' : 'offers';
  //this is actually a different kind of tree to elsewhere in this module.
  foreach ($result1 as $term) {
    if (empty($term['tid']))continue;
    $term['count'] = @$counts[$term['tid']];
    $tid = $term['tid'];
    $term['title'] = $term['name'];
    $term['href'] = $direction.'/'.$tid;
    $term['hidden'] = FALSE;
    $term['has_children'] = FALSE;//can be overridden below
    //put the term at the top of the tree or in the list of children, according to its stated 'parent'
    if ($term['parent']) {
      $parents[$term['parent']][$tid]['link'] = $term;
    }
    else{
      $tree[$tid]['link'] = $term;
    }
  }
  //put the children under the parents, adding to the parents counters
  while (list($parent_tid, $terms) = each($parents)){
    $tree[$parent_tid]['link']['has_children'] = TRUE;
    $tree[$parent_tid]['link']['count'] += intval(@$term['count']);
    $tree[$parent_tid]['below'] = $terms;
    //$tree[$parent_tid]['below'][$term['tid']]['link']['title'] .= ' ('.$term['count'].')';
  }
  //finally put the number after the parent tids
  foreach ($tree as $tid => $term) {
    if ($term['link']['count']) {
      $tree[$tid]['link']['title'] .= ' ('.$term['link']['count'].')';
    }
    else unset($tree[$tid]);
  }

  return theme('jquerymenu_menu', array('tree' => $tree, 'trail' => array(arg(0).'/')));
}

function proposition_start_form($form, $form_state, $want = 0) {
  $node = (object)array();
  //prefill the direction if we are on the offers or wants views page
  $node->want = $want;
  $form = proposition_form($node, $form_state, TRUE);
  $form['#action'] = url('node/add/proposition');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue')
  );
  return $form;
}


/*
 * implements THEME hook
 * adjusts the menu tabs on the offers and wants views to stay within the existing category
 */
function template_preprocess_menu_local_task(&$variables) {
  //first do
  $link = &$variables['element']['#link'];

  if (is_numeric(arg(2))) {
    $cat = arg(2);
    if(substr($link['href'], 0, 7) == 'offers/') {
      $link['href'] .= '/'.$cat;
    }
    elseif(substr($link['href'], 0, 6) == 'wants/') {
      $link['href'] .= '/'.$cat;
    }
  }
}

/*
 * implements hook_form_FORMID_alter
 * rebuild the menu after the term edit form is submitted
 * so that after the first term is added, the node/add/offer and node/add/want paths work.
 */
function offers_wants_form_taxonomy_form_term_alter(&$form) {
  if ($form['#vocabulary']->machine_name == 'offers_wants_categories') {
    $form['#submit'][] = 'menu_rebuild';
  }
}

/*
 * implements hook_variable, if that module is installed
 */
function offers_wants_variable() {
  $variables['offers_wants_proposition_wants'] = array(
    'title' => t('whether wants are enabled')
  );
}

function offers_wants_form_taxonomy_overview_terms_alter(&$form, &$form_state) {
  if ($form['#vocabulary']->machine_name == 'offers_wants_categories') {
    $form['#submit'][] = 'update_proposition_categories_widget';
  }
  //this is as a place as any to check the types vocab and set the instance to required if types has more than one
  if ($form['#vocabulary']->machine_name == 'offers_wants_types') {
    $instance = field_read_instance('node', 'offers_wants_types', 'proposition');
    $instance['required'] = $form['#total_entries'] > 1;
    field_update_instance($instance);
  }
}

/*
 * submit callback added to form taxonomy_overview_terms
 * if the categories vocab is hierarchical, changes the widget using the hierarchical_select module
 */
function update_proposition_categories_widget(&$form) {
  $hierarchy = db_query("SELECT hierarchy FROM {taxonomy_vocabulary} WHERE machine_name = 'offers_wants_categories'")->fetchField();
  if ($hierarchy = $form['#vocabulary']->hierarchy) return;

  $categories_instance = field_read_instance('node', 'offers_wants_categories', 'proposition');

  if ($hierarchy) {
    $categories_vid = taxonomy_vocabulary_machine_name_load('offers_wants_categories')->vid;
    module_enable(array('hs_taxonomy'));
    $categories_instance['widget']['type'] = 'taxonomy_hs';
    $categories_instance['widget']['module'] = 'hs_taxonomy';
    module_load_install('offers_wants');
    variable_set("hs_config_taxonomy-$vid", _ow_get_hs_taxonomy_config($vid));
    //settings should really be here, but instead they are in a variable
    $categories_instance['widget']['settings'] = array();//
  }
  else {
    module_disable(array('hs_taxonomy', 'hierarchical_select'));
    $categories_instance['widget']['type'] = 'options_buttons';
    $categories_instance['widget']['module'] = 'options';
  }
  field_update_instance($categories_instance);
}

function offers_wants_init() {
  drupal_add_css(drupal_get_path('module', 'offers_wants').'/offers_wants.css');
}